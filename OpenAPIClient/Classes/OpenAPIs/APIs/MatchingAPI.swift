//
// MatchingAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class MatchingAPI {
    /**
     Matching Service
     
     - parameter coordinates: (path) String of format {longitude},{latitude};{longitude},{latitude}[;{longitude},{latitude} ...] or polyline({polyline}) or polyline6({polyline6}). polyline follows Google&#39;s polyline format with precision 5 
     - parameter generateHints: (query) Adds a Hint to the response which can be used in subsequent requests, see hints parameter. Input Value - true (default), false Format - Base64 String (optional)
     - parameter approaches: (query) Keep waypoints on curb side. Input Value - {approach};{approach}[;{approach} ...] Format - curb or unrestricted (default) (optional)
     - parameter exclude: (query) Additive list of classes to avoid, order does not matter. input Value - {class}[,{class}] Format - A class name determined by the profile or none. (optional)
     - parameter bearings: (query) Limits the search to segments with given bearing in degrees towards true north in clockwise direction. List of positive integer pairs separated by semi-colon and bearings array should be equal to length of coordinate array. Input Value :- {bearing};{bearing}[;{bearing} ...] Bearing follows the following format : bearing {value},{range} integer 0 .. 360,integer 0 .. 180 (optional)
     - parameter radiuses: (query) Limits the search to given radius in meters Radiuses array length should be same as coordinates array, eaach value separated by semi-colon. Input Value - {radius};{radius}[;{radius} ...] Radius has following format :- double &gt;&#x3D; 0 or unlimited (default) (optional)
     - parameter steps: (query) Returned route steps for each route leg [ true, false (default) ] (optional)
     - parameter annotations: (query) Returns additional metadata for each coordinate along the route geometry.  [ true, false (default), nodes, distance, duration, datasources, weight, speed ] (optional, default to "\"false\"")
     - parameter geometries: (query) Returned route geometry format (influences overview and per step) [ polyline (default), polyline6, geojson ] (optional, default to "\"polyline\"")
     - parameter overview: (query) Add overview geometry either full, simplified according to highest zoom level it could be display on, or not at all. [ simplified (default), full, false ] (optional, default to "\"simplified\"")
     - parameter timestamps: (query) Timestamps for the input locations in seconds since UNIX epoch. Timestamps need to be monotonically increasing. [ {timestamp};{timestamp}[;{timestamp} ...]  integer seconds since UNIX epoch (optional)
     - parameter gaps: (query) Allows the input track splitting based on huge timestamp gaps between points. [ split (default), ignore ] (optional, default to "\"split\"")
     - parameter tidy: (query) Allows the input track modification to obtain better matching quality for noisy tracks. [ true, false (default) ] (optional, default to "\"false\"")
     - parameter waypoints: (query) Treats input coordinates indicated by given indices as waypoints in returned Match object. Default is to treat all input coordinates as waypoints. [ {index};{index};{index}... ] (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func matching(coordinates: String, generateHints: String? = nil, approaches: String? = nil, exclude: String? = nil, bearings: String? = nil, radiuses: String? = nil, steps: String? = nil, annotations: String? = nil, geometries: String? = nil, overview: String? = nil, timestamps: String? = nil, gaps: String? = nil, tidy: String? = nil, waypoints: String? = nil, completion: @escaping ((_ data: DirectionsMatching?,_ error: Error?) -> Void)) {
        matchingWithRequestBuilder(coordinates: coordinates, generateHints: generateHints, approaches: approaches, exclude: exclude, bearings: bearings, radiuses: radiuses, steps: steps, annotations: annotations, geometries: geometries, overview: overview, timestamps: timestamps, gaps: gaps, tidy: tidy, waypoints: waypoints).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Matching Service
     - GET /matching/driving/{coordinates}
     - Matching API matches or snaps given GPS points to the road network in the most plausible way.  Please note the request might result multiple sub-traces.  Large jumps in the timestamps (> 60s) or improbable transitions lead to trace splits if a complete matching could not be found. The algorithm might not be able to match all points. Outliers are removed if they can not be matched successfully.
     - API Key:
       - type: apiKey key (QUERY)
       - name: key
     - parameter coordinates: (path) String of format {longitude},{latitude};{longitude},{latitude}[;{longitude},{latitude} ...] or polyline({polyline}) or polyline6({polyline6}). polyline follows Google&#39;s polyline format with precision 5 
     - parameter generateHints: (query) Adds a Hint to the response which can be used in subsequent requests, see hints parameter. Input Value - true (default), false Format - Base64 String (optional)
     - parameter approaches: (query) Keep waypoints on curb side. Input Value - {approach};{approach}[;{approach} ...] Format - curb or unrestricted (default) (optional)
     - parameter exclude: (query) Additive list of classes to avoid, order does not matter. input Value - {class}[,{class}] Format - A class name determined by the profile or none. (optional)
     - parameter bearings: (query) Limits the search to segments with given bearing in degrees towards true north in clockwise direction. List of positive integer pairs separated by semi-colon and bearings array should be equal to length of coordinate array. Input Value :- {bearing};{bearing}[;{bearing} ...] Bearing follows the following format : bearing {value},{range} integer 0 .. 360,integer 0 .. 180 (optional)
     - parameter radiuses: (query) Limits the search to given radius in meters Radiuses array length should be same as coordinates array, eaach value separated by semi-colon. Input Value - {radius};{radius}[;{radius} ...] Radius has following format :- double &gt;&#x3D; 0 or unlimited (default) (optional)
     - parameter steps: (query) Returned route steps for each route leg [ true, false (default) ] (optional)
     - parameter annotations: (query) Returns additional metadata for each coordinate along the route geometry.  [ true, false (default), nodes, distance, duration, datasources, weight, speed ] (optional, default to "\"false\"")
     - parameter geometries: (query) Returned route geometry format (influences overview and per step) [ polyline (default), polyline6, geojson ] (optional, default to "\"polyline\"")
     - parameter overview: (query) Add overview geometry either full, simplified according to highest zoom level it could be display on, or not at all. [ simplified (default), full, false ] (optional, default to "\"simplified\"")
     - parameter timestamps: (query) Timestamps for the input locations in seconds since UNIX epoch. Timestamps need to be monotonically increasing. [ {timestamp};{timestamp}[;{timestamp} ...]  integer seconds since UNIX epoch (optional)
     - parameter gaps: (query) Allows the input track splitting based on huge timestamp gaps between points. [ split (default), ignore ] (optional, default to "\"split\"")
     - parameter tidy: (query) Allows the input track modification to obtain better matching quality for noisy tracks. [ true, false (default) ] (optional, default to "\"false\"")
     - parameter waypoints: (query) Treats input coordinates indicated by given indices as waypoints in returned Match object. Default is to treat all input coordinates as waypoints. [ {index};{index};{index}... ] (optional)
     - returns: RequestBuilder<DirectionsMatching> 
     */
    open class func matchingWithRequestBuilder(coordinates: String, generateHints: String? = nil, approaches: String? = nil, exclude: String? = nil, bearings: String? = nil, radiuses: String? = nil, steps: String? = nil, annotations: String? = nil, geometries: String? = nil, overview: String? = nil, timestamps: String? = nil, gaps: String? = nil, tidy: String? = nil, waypoints: String? = nil) -> RequestBuilder<DirectionsMatching> {
        var path = "/matching/driving/{coordinates}"
        let coordinatesPreEscape = "\(APIHelper.mapValueToPathItem(coordinates))"
        let coordinatesPostEscape = coordinatesPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{coordinates}", with: coordinatesPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "generate_hints": generateHints?.encodeToJSON(), 
            "approaches": approaches?.encodeToJSON(), 
            "exclude": exclude?.encodeToJSON(), 
            "bearings": bearings?.encodeToJSON(), 
            "radiuses": radiuses?.encodeToJSON(), 
            "steps": steps?.encodeToJSON(), 
            "annotations": annotations?.encodeToJSON(), 
            "geometries": geometries?.encodeToJSON(), 
            "overview": overview?.encodeToJSON(), 
            "timestamps": timestamps?.encodeToJSON(), 
            "gaps": gaps?.encodeToJSON(), 
            "tidy": tidy?.encodeToJSON(), 
            "waypoints": waypoints?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<DirectionsMatching>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
