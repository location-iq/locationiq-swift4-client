//
// MatrixAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class MatrixAPI {
    /**
     Matrix Service
     
     - parameter coordinates: (path) String of format {longitude},{latitude};{longitude},{latitude}[;{longitude},{latitude} ...] or polyline({polyline}) or polyline6({polyline6}). polyline follows Google&#39;s polyline format with precision 5 
     - parameter bearings: (query) Limits the search to segments with given bearing in degrees towards true north in clockwise direction. List of positive integer pairs separated by semi-colon and bearings array should be equal to length of coordinate array. Input Value :- {bearing};{bearing}[;{bearing} ...] Bearing follows the following format : bearing {value},{range} integer 0 .. 360,integer 0 .. 180 (optional)
     - parameter radiuses: (query) Limits the search to given radius in meters Radiuses array length should be same as coordinates array, eaach value separated by semi-colon. Input Value - {radius};{radius}[;{radius} ...] Radius has following format :- double &gt;&#x3D; 0 or unlimited (default) (optional)
     - parameter generateHints: (query) Adds a Hint to the response which can be used in subsequent requests, see hints parameter. Input Value - true (default), false Format - Base64 String (optional)
     - parameter approaches: (query) Keep waypoints on curb side. Input Value - {approach};{approach}[;{approach} ...] Format - curb or unrestricted (default) (optional)
     - parameter exclude: (query) Additive list of classes to avoid, order does not matter. input Value - {class}[,{class}] Format - A class name determined by the profile or none. (optional)
     - parameter annotations: (query) Returns additional metadata for each coordinate along the route geometry.  [ true, false (default), nodes, distance, duration, datasources, weight, speed ] (optional)
     - parameter sources: (query) Use location with given index as source. [ {index};{index}[;{index} ...] or all (default) ] &#x3D;&gt; index  0 &lt;&#x3D; integer &lt; #locations (optional)
     - parameter destinations: (query) Use location with given index as destination. [ {index};{index}[;{index} ...] or all (default) ] (optional)
     - parameter fallbackSpeed: (query) If no route found between a source/destination pair, calculate the as-the-crow-flies distance,  then use this speed to estimate duration. double &gt; 0 (optional)
     - parameter fallbackCoordinate: (query) When using a fallback_speed, use the user-supplied coordinate (input), or the snapped location (snapped) for calculating distances. [ input (default), or snapped ] (optional, default to "\"input\"")
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func matrix(coordinates: String, bearings: String? = nil, radiuses: String? = nil, generateHints: String? = nil, approaches: String? = nil, exclude: String? = nil, annotations: String? = nil, sources: Int? = nil, destinations: Int? = nil, fallbackSpeed: Double? = nil, fallbackCoordinate: String? = nil, completion: @escaping ((_ data: DirectionsMatrix?,_ error: Error?) -> Void)) {
        matrixWithRequestBuilder(coordinates: coordinates, bearings: bearings, radiuses: radiuses, generateHints: generateHints, approaches: approaches, exclude: exclude, annotations: annotations, sources: sources, destinations: destinations, fallbackSpeed: fallbackSpeed, fallbackCoordinate: fallbackCoordinate).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Matrix Service
     - GET /matrix/driving/{coordinates}
     - Computes duration of the fastest route between all pairs of supplied coordinates. Returns the durations or distances or both between the coordinate pairs. Note that the distances are not the shortest distance between two coordinates, but rather the distances of the fastest routes.
     - API Key:
       - type: apiKey key (QUERY)
       - name: key
     - parameter coordinates: (path) String of format {longitude},{latitude};{longitude},{latitude}[;{longitude},{latitude} ...] or polyline({polyline}) or polyline6({polyline6}). polyline follows Google&#39;s polyline format with precision 5 
     - parameter bearings: (query) Limits the search to segments with given bearing in degrees towards true north in clockwise direction. List of positive integer pairs separated by semi-colon and bearings array should be equal to length of coordinate array. Input Value :- {bearing};{bearing}[;{bearing} ...] Bearing follows the following format : bearing {value},{range} integer 0 .. 360,integer 0 .. 180 (optional)
     - parameter radiuses: (query) Limits the search to given radius in meters Radiuses array length should be same as coordinates array, eaach value separated by semi-colon. Input Value - {radius};{radius}[;{radius} ...] Radius has following format :- double &gt;&#x3D; 0 or unlimited (default) (optional)
     - parameter generateHints: (query) Adds a Hint to the response which can be used in subsequent requests, see hints parameter. Input Value - true (default), false Format - Base64 String (optional)
     - parameter approaches: (query) Keep waypoints on curb side. Input Value - {approach};{approach}[;{approach} ...] Format - curb or unrestricted (default) (optional)
     - parameter exclude: (query) Additive list of classes to avoid, order does not matter. input Value - {class}[,{class}] Format - A class name determined by the profile or none. (optional)
     - parameter annotations: (query) Returns additional metadata for each coordinate along the route geometry.  [ true, false (default), nodes, distance, duration, datasources, weight, speed ] (optional)
     - parameter sources: (query) Use location with given index as source. [ {index};{index}[;{index} ...] or all (default) ] &#x3D;&gt; index  0 &lt;&#x3D; integer &lt; #locations (optional)
     - parameter destinations: (query) Use location with given index as destination. [ {index};{index}[;{index} ...] or all (default) ] (optional)
     - parameter fallbackSpeed: (query) If no route found between a source/destination pair, calculate the as-the-crow-flies distance,  then use this speed to estimate duration. double &gt; 0 (optional)
     - parameter fallbackCoordinate: (query) When using a fallback_speed, use the user-supplied coordinate (input), or the snapped location (snapped) for calculating distances. [ input (default), or snapped ] (optional, default to "\"input\"")
     - returns: RequestBuilder<DirectionsMatrix> 
     */
    open class func matrixWithRequestBuilder(coordinates: String, bearings: String? = nil, radiuses: String? = nil, generateHints: String? = nil, approaches: String? = nil, exclude: String? = nil, annotations: String? = nil, sources: Int? = nil, destinations: Int? = nil, fallbackSpeed: Double? = nil, fallbackCoordinate: String? = nil) -> RequestBuilder<DirectionsMatrix> {
        var path = "/matrix/driving/{coordinates}"
        let coordinatesPreEscape = "\(APIHelper.mapValueToPathItem(coordinates))"
        let coordinatesPostEscape = coordinatesPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{coordinates}", with: coordinatesPostEscape, options: .literal, range: nil)
        let URLString = LocationIQAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "bearings": bearings?.encodeToJSON(), 
            "radiuses": radiuses?.encodeToJSON(), 
            "generate_hints": generateHints?.encodeToJSON(), 
            "approaches": approaches?.encodeToJSON(), 
            "exclude": exclude?.encodeToJSON(), 
            "annotations": annotations?.encodeToJSON(), 
            "sources": sources?.encodeToJSON(), 
            "destinations": destinations?.encodeToJSON(), 
            "fallback_speed": fallbackSpeed?.encodeToJSON(), 
            "fallback_coordinate": fallbackCoordinate?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<DirectionsMatrix>.Type = LocationIQAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
