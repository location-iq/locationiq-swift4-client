//
// SearchAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Alamofire



open class SearchAPI {
    /**
     * enum for parameter format
     */
    public enum Format_search: String {
        case json = "json"
    }

    /**
     * enum for parameter normalizecity
     */
    public enum Normalizecity_search: Int {
        case _1 = 1
    }

    /**
     * enum for parameter addressdetails
     */
    public enum Addressdetails_search: Int {
        case _0 = 0
        case _1 = 1
    }

    /**
     * enum for parameter bounded
     */
    public enum Bounded_search: Int {
        case _0 = 0
        case _1 = 1
    }

    /**
     * enum for parameter namedetails
     */
    public enum Namedetails_search: Int {
        case _0 = 0
        case _1 = 1
    }

    /**
     * enum for parameter dedupe
     */
    public enum Dedupe_search: Int {
        case _0 = 0
        case _1 = 1
    }

    /**
     * enum for parameter extratags
     */
    public enum Extratags_search: Int {
        case _0 = 0
        case _1 = 1
    }

    /**
     * enum for parameter statecode
     */
    public enum Statecode_search: Int {
        case _0 = 0
        case _1 = 1
    }

    /**
     Forward Geocoding
     
     - parameter q: (query) Address to geocode 
     - parameter format: (query) Format to geocode. Only JSON supported for SDKs 
     - parameter normalizecity: (query) For responses with no city value in the address section, the next available element in this order - city_district, locality, town, borough, municipality, village, hamlet, quarter, neighbourhood - from the address section will be normalized to city. Defaults to 1 for SDKs. 
     - parameter addressdetails: (query) Include a breakdown of the address into elements. Defaults to 0. (optional)
     - parameter viewbox: (query) The preferred area to find search results.  To restrict results to those within the viewbox, use along with the bounded option. Tuple of 4 floats. Any two corner points of the box - &#x60;max_lon,max_lat,min_lon,min_lat&#x60; or &#x60;min_lon,min_lat,max_lon,max_lat&#x60; - are accepted in any order as long as they span a real box.  (optional)
     - parameter bounded: (query) Restrict the results to only items contained with the viewbox (optional)
     - parameter limit: (query) Limit the number of returned results. Default is 10. (optional, default to 10)
     - parameter acceptLanguage: (query) Preferred language order for showing search results, overrides the value specified in the Accept-Language HTTP header. Defaults to en. To use native language for the response when available, use accept-language&#x3D;native (optional)
     - parameter countrycodes: (query) Limit search to a list of countries. (optional)
     - parameter namedetails: (query) Include a list of alternative names in the results. These may include language variants, references, operator and brand. (optional)
     - parameter dedupe: (query) Sometimes you have several objects in OSM identifying the same place or object in reality. The simplest case is a street being split in many different OSM ways due to different characteristics. Nominatim will attempt to detect such duplicates and only return one match; this is controlled by the dedupe parameter which defaults to 1. Since the limit is, for reasons of efficiency, enforced before and not after de-duplicating, it is possible that de-duplicating leaves you with less results than requested. (optional)
     - parameter extratags: (query) Include additional information in the result if available, e.g. wikipedia link, opening hours. (optional)
     - parameter statecode: (query) Adds state or province code when available to the statecode key inside the address element. Currently supported for addresses in the USA, Canada and Australia. Defaults to 0 (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func search(q: String, format: Format_search, normalizecity: Normalizecity_search, addressdetails: Addressdetails_search? = nil, viewbox: String? = nil, bounded: Bounded_search? = nil, limit: Int? = nil, acceptLanguage: String? = nil, countrycodes: String? = nil, namedetails: Namedetails_search? = nil, dedupe: Dedupe_search? = nil, extratags: Extratags_search? = nil, statecode: Statecode_search? = nil, completion: @escaping ((_ data: [Location]?,_ error: Error?) -> Void)) {
        searchWithRequestBuilder(q: q, format: format, normalizecity: normalizecity, addressdetails: addressdetails, viewbox: viewbox, bounded: bounded, limit: limit, acceptLanguage: acceptLanguage, countrycodes: countrycodes, namedetails: namedetails, dedupe: dedupe, extratags: extratags, statecode: statecode).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Forward Geocoding
     - GET /search.php
     - The Search API allows converting addresses, such as a street address, into geographic coordinates (latitude and longitude). These coordinates can serve various use-cases, from placing markers on a map to helping algorithms determine nearby bus stops. This process is also known as Forward Geocoding.
     - API Key:
       - type: apiKey key (QUERY)
       - name: key
     - parameter q: (query) Address to geocode 
     - parameter format: (query) Format to geocode. Only JSON supported for SDKs 
     - parameter normalizecity: (query) For responses with no city value in the address section, the next available element in this order - city_district, locality, town, borough, municipality, village, hamlet, quarter, neighbourhood - from the address section will be normalized to city. Defaults to 1 for SDKs. 
     - parameter addressdetails: (query) Include a breakdown of the address into elements. Defaults to 0. (optional)
     - parameter viewbox: (query) The preferred area to find search results.  To restrict results to those within the viewbox, use along with the bounded option. Tuple of 4 floats. Any two corner points of the box - &#x60;max_lon,max_lat,min_lon,min_lat&#x60; or &#x60;min_lon,min_lat,max_lon,max_lat&#x60; - are accepted in any order as long as they span a real box.  (optional)
     - parameter bounded: (query) Restrict the results to only items contained with the viewbox (optional)
     - parameter limit: (query) Limit the number of returned results. Default is 10. (optional, default to 10)
     - parameter acceptLanguage: (query) Preferred language order for showing search results, overrides the value specified in the Accept-Language HTTP header. Defaults to en. To use native language for the response when available, use accept-language&#x3D;native (optional)
     - parameter countrycodes: (query) Limit search to a list of countries. (optional)
     - parameter namedetails: (query) Include a list of alternative names in the results. These may include language variants, references, operator and brand. (optional)
     - parameter dedupe: (query) Sometimes you have several objects in OSM identifying the same place or object in reality. The simplest case is a street being split in many different OSM ways due to different characteristics. Nominatim will attempt to detect such duplicates and only return one match; this is controlled by the dedupe parameter which defaults to 1. Since the limit is, for reasons of efficiency, enforced before and not after de-duplicating, it is possible that de-duplicating leaves you with less results than requested. (optional)
     - parameter extratags: (query) Include additional information in the result if available, e.g. wikipedia link, opening hours. (optional)
     - parameter statecode: (query) Adds state or province code when available to the statecode key inside the address element. Currently supported for addresses in the USA, Canada and Australia. Defaults to 0 (optional)
     - returns: RequestBuilder<[Location]> 
     */
    open class func searchWithRequestBuilder(q: String, format: Format_search, normalizecity: Normalizecity_search, addressdetails: Addressdetails_search? = nil, viewbox: String? = nil, bounded: Bounded_search? = nil, limit: Int? = nil, acceptLanguage: String? = nil, countrycodes: String? = nil, namedetails: Namedetails_search? = nil, dedupe: Dedupe_search? = nil, extratags: Extratags_search? = nil, statecode: Statecode_search? = nil) -> RequestBuilder<[Location]> {
        let path = "/search.php"
        let URLString = LocationIQAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "q": q, 
            "format": format.rawValue, 
            "normalizecity": normalizecity.rawValue, 
            "addressdetails": addressdetails?.rawValue, 
            "viewbox": viewbox, 
            "bounded": bounded?.rawValue, 
            "limit": limit?.encodeToJSON(), 
            "accept-language": acceptLanguage, 
            "countrycodes": countrycodes, 
            "namedetails": namedetails?.rawValue, 
            "dedupe": dedupe?.rawValue, 
            "extratags": extratags?.rawValue, 
            "statecode": statecode?.rawValue
        ])

        let requestBuilder: RequestBuilder<[Location]>.Type = LocationIQAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
